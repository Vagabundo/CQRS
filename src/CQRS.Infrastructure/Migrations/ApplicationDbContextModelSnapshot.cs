// <auto-generated />
using System;
using CQRS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CQRS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CQRS.Domain.Rents.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancellationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancellation_time");

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_time");

                    b.Property<DateTime?>("ConfirmationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmation_time");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<DateTime?>("RejectionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rejection_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_rents");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_rents_user_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_rents_vehicle_id");

                    b.ToTable("rents", (string)null);
                });

            modelBuilder.Entity("CQRS.Domain.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("RentId")
                        .HasColumnType("uuid")
                        .HasColumnName("rent_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("RentId")
                        .HasDatabaseName("ix_reviews_rent_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_reviews_vehicle_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("CQRS.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("email");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("family_name");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CQRS.Domain.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int[]>("Accessories")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("accessories");

                    b.Property<DateTime?>("LastRentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_rent_date");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("model");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Vin")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("CQRS.Domain.Rents.Rent", b =>
                {
                    b.HasOne("CQRS.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rents_user_user_id");

                    b.HasOne("CQRS.Domain.Vehicles.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rents_vehicle_vehicle_id");

                    b.OwnsOne("CQRS.Domain.Rents.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date")
                                .HasColumnName("duration_end");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date")
                                .HasColumnName("duration_start");

                            b1.HasKey("RentId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.OwnsOne("CQRS.Domain.Shared.Money", "Accessories", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Ammount")
                                .HasColumnType("numeric")
                                .HasColumnName("accessories_ammount");

                            b1.Property<string>("Coin")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("accessories_coin");

                            b1.HasKey("RentId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.OwnsOne("CQRS.Domain.Shared.Money", "CostPerPeriod", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Ammount")
                                .HasColumnType("numeric")
                                .HasColumnName("cost_per_period_ammount");

                            b1.Property<string>("Coin")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cost_per_period_coin");

                            b1.HasKey("RentId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.OwnsOne("CQRS.Domain.Shared.Money", "Maintenance", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Ammount")
                                .HasColumnType("numeric")
                                .HasColumnName("maintenance_ammount");

                            b1.Property<string>("Coin")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("maintenance_coin");

                            b1.HasKey("RentId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.OwnsOne("CQRS.Domain.Shared.Money", "TotalCost", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Ammount")
                                .HasColumnType("numeric")
                                .HasColumnName("total_cost_ammount");

                            b1.Property<string>("Coin")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("total_cost_coin");

                            b1.HasKey("RentId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.Navigation("Accessories");

                    b.Navigation("CostPerPeriod");

                    b.Navigation("Duration");

                    b.Navigation("Maintenance");

                    b.Navigation("TotalCost");
                });

            modelBuilder.Entity("CQRS.Domain.Reviews.Review", b =>
                {
                    b.HasOne("CQRS.Domain.Rents.Rent", null)
                        .WithMany()
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_rents_rent_id");

                    b.HasOne("CQRS.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_user_user_id");

                    b.HasOne("CQRS.Domain.Vehicles.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_vehicle_vehicle_id");
                });

            modelBuilder.Entity("CQRS.Domain.Vehicles.Vehicle", b =>
                {
                    b.OwnsOne("CQRS.Domain.Vehicles.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_number");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_province");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.HasKey("VehicleId");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("fk_vehicles_vehicles_id");
                        });

                    b.OwnsOne("CQRS.Domain.Shared.Money", "Cost", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Ammount")
                                .HasColumnType("numeric")
                                .HasColumnName("cost_ammount");

                            b1.Property<string>("Coin")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cost_coin");

                            b1.HasKey("VehicleId");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("fk_vehicles_vehicles_id");
                        });

                    b.OwnsOne("CQRS.Domain.Shared.Money", "Maintenance", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Ammount")
                                .HasColumnType("numeric")
                                .HasColumnName("maintenance_ammount");

                            b1.Property<string>("Coin")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("maintenance_coin");

                            b1.HasKey("VehicleId");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("fk_vehicles_vehicles_id");
                        });

                    b.Navigation("Address");

                    b.Navigation("Cost");

                    b.Navigation("Maintenance");
                });
#pragma warning restore 612, 618
        }
    }
}
